.TH "jarvis.JARVIS" 3 "JARVIS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jarvis.JARVIS \- Main class for the \fBJARVIS\fP logging system\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBjarvis_utilities\&.JarvisUtilitiesMixin\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__init__\fP (self, \fBlevel\fP='WARNING')"
.br
.RI "Initializes the \fBJARVIS\fP logger with a default logging level\&. "
.ti -1c
.RI "\fBAddTest\fP (self, test_fn=lambda:False, result_key=True, callback_true=None, callback_false=None, name='test')"
.br
.RI "Add a new test to the current context\&. "
.ti -1c
.RI "\fBCb_False\fP (self, message, \fBlevel\fP='FAIL')"
.br
.RI "Generate a failure callback message\&. "
.ti -1c
.RI "\fBCb_True\fP (self, message, \fBlevel\fP='SUCCESS')"
.br
.RI "Generate a success callback message\&. "
.ti -1c
.RI "\fBDebug\fP (self, message)"
.br
.RI "Log a debug message\&. "
.ti -1c
.RI "\fBError\fP (self, message)"
.br
.RI "Log an error message\&. "
.ti -1c
.RI "\fBLog\fP (self, message, \fBlevel\fP)"
.br
.RI "Log a message at a specified level\&. "
.ti -1c
.RI "\fBNavigate\fP (self, destination='children')"
.br
.RI "Navigate to a different context within the logger\&. "
.ti -1c
.RI "\fBTriggerTest\fP (self, test, val)"
.br
.RI "Trigger a specific test\&. "
.ti -1c
.RI "\fBWarning\fP (self, message)"
.br
.RI "Log a warning message\&. "
.ti -1c
.RI "\fBWriteLog\fP (self)"
.br
.RI "Print all the log entries stored in \fRmsg_log\fP\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "dict \fBcontexts\fP = {}"
.br
.ti -1c
.RI "list \fBcurrent_path\fP = []"
.br
.ti -1c
.RI "\fBlevel\fP = level"
.br
.ti -1c
.RI "dict \fBlevels\fP"
.br
.ti -1c
.RI "list \fBmsg_log\fP = []"
.br
.ti -1c
.RI "int \fBprint_lvl\fP = \-1"
.br
.ti -1c
.RI "list \fBtests\fP = []"
.br
.ti -1c
.RI "int \fBunnamed_tests\fP = 0"
.br
.in -1c

Public Attributes inherited from \fBjarvis_utilities\&.JarvisUtilitiesMixin\fP
.in +1c
.ti -1c
.RI "\fBcontexts\fP"
.br
.ti -1c
.RI "# If no current path, initialize the root context \fBcurrent_path\fP = context\&.get(part, context)"
.br
.ti -1c
.RI "dict \fBcurrent_path\fP = {}"
.br
.in -1c

Public Attributes inherited from \fBjarvis_printing\&.JarvisPrintingMixin\fP
.in +1c
.ti -1c
.RI "\fBcontexts\fP"
.br
.ti -1c
.RI "\fBcurrent_path\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBjarvis_utilities\&.JarvisUtilitiesMixin\fP
.in +1c
.ti -1c
.RI "\fB_autoname\fP (self, name='children', parent='')"
.br
.RI "Automatically generates a name for a new context to avoid conflicts\&. "
.ti -1c
.RI "\fB_autonameTests\fP (self, name='test', parent='TESTS')"
.br
.RI "Automatically generates a unique name for a new test\&. "
.ti -1c
.RI "\fB_get_current_context\fP (self)"
.br
.RI "Retrieves the current context based on the current path\&. "
.ti -1c
.RI "\fB_set_new_context\fP (self, name='children', parent=None)"
.br
.RI "Sets a new context in the logger's hierarchy\&. "
.ti -1c
.RI "\fB_trigger_messages\fP (self, result, test)"
.br
.RI "Triggers success or failure messages based on the result of a test\&. "
.in -1c

Protected Member Functions inherited from \fBjarvis_printing\&.JarvisPrintingMixin\fP
.in +1c
.ti -1c
.RI "\fB_format_message\fP (self, level, message, name='', ignore=False)"
.br
.RI "Formats a log message based on its level and other parameters\&. "
.ti -1c
.RI "\fB_print\fP (self, name, val='')"
.br
.RI "Prints a debug message with the current indentation level\&. "
.ti -1c
.RI "\fB_print_contexts\fP (self)"
.br
.RI "Prints the current state of contexts for debugging purposes\&. "
.ti -1c
.RI "\fB_printIn\fP (self, fn_name)"
.br
.RI "Increases indentation level and prints entering/exiting messages\&. "
.ti -1c
.RI "\fB_printOut\fP (self, fn_name)"
.br
.RI "Decreases indentation level and prints an exiting message\&. "
.in -1c
.SH "Detailed Description"
.PP 
Main class for the \fBJARVIS\fP logging system\&. 

The \fBJARVIS\fP class extends JarvisUtilitiesMixin, incorporating a variety of logging and utility functions\&. This class provides methods for logging messages at different levels, navigating between contexts, adding and triggering tests, and generating callback messages\&. The class is designed to be the central point of interaction for the \fBJARVIS\fP logging system\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "jarvis\&.JARVIS\&.__init__ ( self,  level = \fR'WARNING'\fP)"

.PP
Initializes the \fBJARVIS\fP logger with a default logging level\&. This constructor sets up the initial state of the \fBJARVIS\fP logger, including the logging level, context hierarchy, and test management\&. It also initializes internal variables that track indentation levels, logging contexts, and the log itself\&.

.PP
\fBParameters\fP
.RS 4
\fIlevel\fP The default logging level (defaults to 'WARNING')\&.
.RE
.PP
.PP
.nf
Initialize the Logger with a default logging level\&.

:param level: Default logging level, defaults to 'WARNING'\&.
.fi
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "jarvis\&.JARVIS\&.AddTest ( self,  test_fn = \fRlambda: False\fP,  result_key = \fRTrue\fP,  callback_true = \fRNone\fP,  callback_false = \fRNone\fP,  name = \fR'test'\fP)"

.PP
Add a new test to the current context\&. This method adds a new test to the current context within the logging hierarchy\&. The test is defined by a test function, expected result, and optional callback functions for handling success and failure\&. The test is automatically named to avoid conflicts, and the method returns the test object\&.

.PP
\fBParameters\fP
.RS 4
\fItest_fn\fP The test function to evaluate (defaults to a lambda returning False)\&. 
.br
\fIresult_key\fP Expected result key for the test (defaults to True)\&. 
.br
\fIcallback_true\fP Callback function if the test passes (defaults to a success message)\&. 
.br
\fIcallback_false\fP Callback function if the test fails (defaults to a failure message)\&. 
.br
\fIname\fP Name of the test (defaults to 'test')\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The newly added test object\&.
.RE
.PP
.PP
.nf
Add a new test to the current context\&.

:param test_fn: The test function to evaluate\&.
:param result_key: Expected result key for the test\&.
:param callback_true: Callback function if the test passes\&.
:param callback_false: Callback function if the test fails\&.
:param name: Name of the test\&.
:return: The newly added test object\&.
.fi
.PP
 
.SS "jarvis\&.JARVIS\&.Cb_False ( self,  message,  level = \fR'FAIL'\fP)"

.PP
Generate a failure callback message\&. This method generates a callback message indicating that a test has failed\&. The message is formatted with a 'FAIL' level by default\&.

.PP
\fBParameters\fP
.RS 4
\fImessage\fP The message to format\&. 
.br
\fIlevel\fP The logging level (defaults to 'FAIL')\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The formatted message\&.
.RE
.PP
.PP
.nf
Generate a failure callback message\&.

:param message: The message to format\&.
:param level: The logging level, defaults to 'FAIL'\&.
:return: The formatted message\&.
.fi
.PP
 
.SS "jarvis\&.JARVIS\&.Cb_True ( self,  message,  level = \fR'SUCCESS'\fP)"

.PP
Generate a success callback message\&. This method generates a callback message indicating that a test has passed\&. The message is formatted with a 'SUCCESS' level by default\&.

.PP
\fBParameters\fP
.RS 4
\fImessage\fP The message to format\&. 
.br
\fIlevel\fP The logging level (defaults to 'SUCCESS')\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The formatted message\&.
.RE
.PP
.PP
.nf
Generate a success callback message\&.

:param message: The message to format\&.
:param level: The logging level, defaults to 'SUCCESS'\&.
:return: The formatted message\&.
.fi
.PP
 
.SS "jarvis\&.JARVIS\&.Debug ( self,  message)"

.PP
Log a debug message\&. This method logs a message at the 'DEBUG' level, which is typically used for detailed debugging information that may not be required during normal operation\&.

.PP
\fBParameters\fP
.RS 4
\fImessage\fP The debug message to log\&.
.RE
.PP
.PP
.nf
Log a debug message\&.

:param message: The debug message to log\&.
.fi
.PP
 
.SS "jarvis\&.JARVIS\&.Error ( self,  message)"

.PP
Log an error message\&. This method logs a message at the 'ERROR' level, which is typically used for logging serious issues that might cause the application to behave unexpectedly\&.

.PP
\fBParameters\fP
.RS 4
\fImessage\fP The error message to log\&.
.RE
.PP
.PP
.nf
Log an error message\&.

:param message: The error message to log\&.
.fi
.PP
 
.SS "jarvis\&.JARVIS\&.Log ( self,  message,  level)"

.PP
Log a message at a specified level\&. This method logs a message at the given level by navigating to the appropriate context, formatting the message, and storing it in the current context\&. It also returns the formatted message\&.

.PP
\fBParameters\fP
.RS 4
\fImessage\fP The message to log\&. 
.br
\fIlevel\fP The level at which to log the message\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The formatted message\&.
.RE
.PP
.PP
.nf
Log a message at the given level\&.

:param message: The message to log\&.
:param level: The level at which to log the message\&.
:return: The formatted message\&.
.fi
.PP
 
.SS "jarvis\&.JARVIS\&.Navigate ( self,  destination = \fR'children'\fP)"

.PP
Navigate to a different context within the logger\&. This method allows the user to move between different contexts within the logging hierarchy\&. It can navigate to a child context or move up to the parent context\&. If the destination context does not exist, it creates a new one\&.

.PP
\fBParameters\fP
.RS 4
\fIdestination\fP The context to navigate to (defaults to 'children')\&.
.RE
.PP
.PP
.nf
Navigate to a different context\&.

:param destination: The context to navigate to\&. Defaults to 'children'\&.
.fi
.PP
 
.SS "jarvis\&.JARVIS\&.TriggerTest ( self,  test,  val)"

.PP
Trigger a specific test\&. This method triggers a specific test by executing the test function with the provided value\&. It then logs appropriate success or failure messages based on the test result and updates the test's status\&.

.PP
\fBParameters\fP
.RS 4
\fItest\fP The test object to trigger\&. 
.br
\fIval\fP The value to pass to the test function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The test object after execution\&.
.RE
.PP
.PP
.nf
Trigger a specific test\&.

:param test: The test object to trigger\&.
:param val: The value to pass to the test function\&.
:return: The test object after execution\&.
.fi
.PP
 
.SS "jarvis\&.JARVIS\&.Warning ( self,  message)"

.PP
Log a warning message\&. This method logs a message at the 'WARNING' level, which is typically used for logging potentially harmful situations or important notices that require attention\&.

.PP
\fBParameters\fP
.RS 4
\fImessage\fP The warning message to log\&.
.RE
.PP
.PP
.nf
Log a warning message\&.

:param message: The warning message to log\&.
.fi
.PP
 
.SS "jarvis\&.JARVIS\&.WriteLog ( self)"

.PP
Print all the log entries stored in \fRmsg_log\fP\&. This method iterates over all log entries stored in the \fRmsg_log\fP list and prints them\&. This provides a simple way to output the entire log to the console\&.

.PP
.PP
.nf
Print all the log entries stored in `msg_log`\&.
.fi
.PP
 
.SH "Member Data Documentation"
.PP 
.SS "dict jarvis\&.JARVIS\&.contexts = {}"

.SS "jarvis\&.JARVIS\&.current_path = []"

.SS "jarvis\&.JARVIS\&.level = level"

.SS "dict jarvis\&.JARVIS\&.levels"
\fBInitial value:\fP
.nf
=  {
            "INFO": 0,
            "DEBUG": 10,
            "FAIL": 15,
            "SUCCESS": 15,
            "WARNING": 20,
            "ERROR": 30
        }
.PP
.fi

.SS "list jarvis\&.JARVIS\&.msg_log = []"

.SS "int jarvis\&.JARVIS\&.print_lvl = \-1"

.SS "list jarvis\&.JARVIS\&.tests = []"

.SS "int jarvis\&.JARVIS\&.unnamed_tests = 0"


.SH "Author"
.PP 
Generated automatically by Doxygen for JARVIS from the source code\&.
